name: Build and Package

# This workflow runs on pushes and pull requests to the main branches.
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-13, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- DEPENDENCY INSTALLATION ---
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git libcurl4-openssl-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libdecor-0-dev libxkbcommon-dev libfreetype6-dev libharfbuzz-dev libasound2-dev
          git clone https://github.com/libsdl-org/SDL.git -b main && cd SDL && cmake -B build && cmake --build build && sudo cmake --install build && cd ..
          git clone https://github.com/libsdl-org/SDL_image.git -b main && cd SDL_image && cmake -B build && cmake --build build && sudo cmake --install build && cd ..
          git clone https://github.com/libsdl-org/SDL_ttf.git -b main && cd SDL_ttf && cmake -B build && cmake --build build && sudo cmake --install build && cd ..

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install sdl3 sdl3_image sdl3_ttf curl jpeg-xl webp

      # --- CMAKE CONFIGURATION (FIXED) ---
      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake (macOS)
        if: runner.os == 'macOS'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(brew --prefix) -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0"

      # --- BUILD STEP ---
      - name: Build Project
        run: cmake --build build --config Release

      # --- PACKAGING STEP (REVISED FOR MACOS) ---
      - name: Package Artifacts
        shell: bash
        run: |
          mkdir release
          if [ "$RUNNER_OS" == "macOS" ]; then
            # --- SCRIPT WITH RECURSIVE DEPENDENCY BUNDLING FOR .APP ---
            BUNDLE_SRC_PATH="build/Advancely.app"
            BUNDLE_DEST_PATH="release/Advancely.app"
            EXE_DEST_PATH="$BUNDLE_DEST_PATH/Contents/MacOS/Advancely"
            LIBS_DEST_DIR="$BUNDLE_DEST_PATH/Contents/MacOS"
            BREW_PREFIX=$(brew --prefix)
            echo "Using Homebrew prefix: $BREW_PREFIX"
          
            cp -R "$BUNDLE_SRC_PATH" "release/"
            cp -r resources "release/"
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md "release/"

            LIBS_TO_PROCESS=()
            PROCESSED_LIBS=() # Tracks full original paths
            COPIED_LIBS_BASENAMES=() # Tracks filenames to prevent duplicates
          
            DIRECT_DEPS=$(otool -L "$EXE_DEST_PATH" | grep "$BREW_PREFIX" | awk '{gsub(/:$/, ""); print $1}')
            for dep in $DIRECT_DEPS; do
              LIBS_TO_PROCESS+=("$dep")
            done

            while [ ${#LIBS_TO_PROCESS[@]} -gt 0 ]; do
              lib_path=${LIBS_TO_PROCESS[0]}
              lib_name=$(basename "$lib_path")
              LIBS_TO_PROCESS=("${LIBS_TO_PROCESS[@]:1}")

              # FIX: Check if we have already copied a library with this FILENAME.
              if [[ " ${COPIED_LIBS_BASENAMES[*]} " =~ " ${lib_name} " ]]; then
                # If we have, we don't need to copy it again. But we still must ensure
                # the executable knows to look for the version we already copied.
                install_name_tool -change "$lib_path" "@executable_path/$lib_name" "$EXE_DEST_PATH"
                continue
              fi

              echo "Processing dependency: $lib_path"
              cp "$lib_path" "$LIBS_DEST_DIR/"
              install_name_tool -change "$lib_path" "@executable_path/$lib_name" "$EXE_DEST_PATH"
          
              PROCESSED_LIBS+=("$lib_path")
              COPIED_LIBS_BASENAMES+=("$lib_name")
          
              TRANSITIVE_DEPS=$(otool -L "$lib_path" | grep "$BREW_PREFIX" | awk '{gsub(/:$/, ""); print $1}')
              for transitive_dep in $TRANSITIVE_DEPS; do
                LIBS_TO_PROCESS+=("$transitive_dep")
              done
            done
          
            for copied_lib_path in "$LIBS_DEST_DIR"/lib*.dylib; do
              for original_lib_path in "${PROCESSED_LIBS[@]}"; do
                original_lib_name=$(basename "$original_lib_path")
                if [ -f "$LIBS_DEST_DIR/$original_lib_name" ]; then
                  install_name_tool -change "$original_lib_path" "@executable_path/$original_lib_name" "$copied_lib_path"
                fi
              done
            done
          
            codesign --force --sign - "$LIBS_DEST_DIR"/lib*.dylib
            codesign --force --deep --sign - "$BUNDLE_DEST_PATH"
          
            TEMPLATE_DIR="release/resources/templates/1.16.1"
            if [ -d "$TEMPLATE_DIR/All_Advancements" ]; then
              mv "$TEMPLATE_DIR/All_Advancements" "$TEMPLATE_DIR/advancements_temp" && mv "$TEMPLATE_DIR/advancements_temp" "$TEMPLATE_DIR/all_advancements"
            fi
            LOWERCASE_DIR="$TEMPLATE_DIR/all_advancements"
            if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements.json" ]; then
              mv "$LOWERCASE_DIR/1_16_1_All_Advancements.json" "$LOWERCASE_DIR/temp.json" && mv "$LOWERCASE_DIR/temp.json" "$LOWERCASE_DIR/1_16_1_all_advancements.json"
            fi
            if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" ]; then
              mv "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" "$LOWERCASE_DIR/temp_lang.json" && mv "$LOWERCASE_DIR/temp_lang.json" "$LOWERCASE_DIR/1_16_1_all_advancements_lang.json"
            fi
          elif [ "$RUNNER_OS" == "Linux" ]; then
            cp build/Advancely release/
            cp -r resources release/
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
            cp /usr/local/lib/libSDL3.so.0 release/
            cp /usr/local/lib/libSDL3_image.so.0 release/
            cp /usr/local/lib/libSDL3_ttf.so.0 release/
            TEMPLATE_DIR="release/resources/templates/1.16.1"
            if [ -d "$TEMPLATE_DIR/All_Advancements" ]; then
              mv "$TEMPLATE_DIR/All_Advancements" "$TEMPLATE_DIR/all_advancements"
            fi
            LOWERCASE_DIR="$TEMPLATE_DIR/all_advancements"
            if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements.json" ]; then
              mv "$LOWERCASE_DIR/1_16_1_All_Advancements.json" "$LOWERCASE_DIR/1_16_1_all_advancements.json"
            fi
            if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" ]; then
              mv "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" "$LOWERCASE_DIR/1_16_1_all_advancements_lang.json"
            fi
          fi

      # --- ZIPPING AND UPLOADING STEP (FIXED) ---
      - name: Set Final Archive Name
        id: set_filename
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            SUFFIX="${{ matrix.os }}-${{ runner.arch }}" # e.g., macos-13-X64
          elif [ "$RUNNER_OS" == "Linux" ]; then
            SUFFIX="Linux"
          fi
          FILENAME="Advancely-v${{ env.PROJECT_VERSION }}-${SUFFIX}"
          echo "FILENAME=$FILENAME" >> $GITHUB_ENV

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: release/