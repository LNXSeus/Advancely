name: Build and Package

# Controls when the workflow will run
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-13, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- LINUX STEPS ---
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          # Step 1: Install build tools and SDL's own dependencies
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git libcurl4-openssl-dev \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev \
          libxi-dev libxss-dev libwayland-dev libdecor-0-dev libxkbcommon-dev \
          libfreetype6-dev libharfbuzz-dev libasound2-dev
          
          # Step 2: Build and install SDL3 from source
          echo "Building SDL3 from source..."
          git clone https://github.com/libsdl-org/SDL.git -b main
          cd SDL
          cmake -B build
          cmake --build build
          sudo cmake --install build
          cd ..
          
          # Step 3: Build and install SDL3_image from source
          echo "Building SDL3_image from source..."
          git clone https://github.com/libsdl-org/SDL_image.git -b main
          cd SDL_image
          cmake -B build
          cmake --build build
          sudo cmake --install build
          cd ..
          
          # Step 4: Build and install SDL3_ttf from source
          echo "Building SDL3_ttf from source..."
          git clone https://github.com/libsdl-org/SDL_ttf.git -b main
          cd SDL_ttf
          cmake -B build
          cmake --build build
          sudo cmake --install build
          cd ..

      # --- MACOS STEPS ---
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install sdl3 sdl3_image sdl3_ttf curl

      - name: Configure CMake (Linux/macOS)
        if: runner.os != 'Windows'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      # --- BUILD STEP ---
      - name: Build Project
        run: cmake --build build --config Release

      # --- PACKAGING STEPS ---
      - name: Package Artifacts
        shell: bash
        run: |
          # Create a staging directory for the release artifact
          mkdir release
          
          if [ "$RUNNER_OS" == "macOS" ]; then
            # --- SCRIPT TO CREATE A PORTABLE FOLDER FOR MACOS ---

            # 1. Define paths
            EXE_PATH="build/Advancely"
            DEST_DIR="release"

            # 1a. Dynamically get the Homebrew prefix to support both Intel and Apple Silicon
            BREW_PREFIX=$(brew --prefix)
            echo "Using Homebrew prefix: $BREW_PREFIX"
          
            # 2. Copy the main files into the release folder first
            cp "$EXE_PATH" "$DEST_DIR/"
            cp -r resources "$DEST_DIR/"
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md "$DEST_DIR/"

            # 3. Create lists for tracking dependencies
            LIBS_TO_PROCESS=()
            PROCESSED_LIBS=() # Tracks full original paths for fixup
            COPIED_LIBS_BASENAMES=() # Tracks filenames to prevent duplicates

            # 4. Find direct dependencies of the executable, using the dynamic prefix
            DIRECT_DEPS=$(otool -L "$EXE_PATH" | grep "$BREW_PREFIX" | awk '{print $1}' | sed 's/://')
            for dep in $DIRECT_DEPS; do
              LIBS_TO_PROCESS+=("$dep")
            done
          
            # 5. Recursively find all transitive dependencies
            while [ ${#LIBS_TO_PROCESS[@]} -gt 0 ]; do
              lib_path=${LIBS_TO_PROCESS[0]}
              lib_name=$(basename "$lib_path")
              LIBS_TO_PROCESS=("${LIBS_TO_PROCESS[@]:1}")

              # Check if a library with this FILENAME has already been copied
              if [[ " ${COPIED_LIBS_BASENAMES[*]} " =~ " ${lib_name} " ]]; then
                # Already processed, but we still need to fix the executable's link to it
                install_name_tool -change "$lib_path" "@executable_path/$lib_name" "$DEST_DIR/Advancely"
                continue
              fi
          
              echo "Processing dependency: $lib_path"
              cp "$lib_path" "$DEST_DIR/"
              install_name_tool -change "$lib_path" "@executable_path/$lib_name" "$DEST_DIR/Advancely"
          
              # Find dependencies OF THIS LIBRARY and add them to the queue
              TRANSITIVE_DEPS=$(otool -L "$lib_path" | grep "$BREW_PREFIX" | awk '{print $1}' | sed 's/://')
              for transitive_dep in $TRANSITIVE_DEPS; do
                LIBS_TO_PROCESS+=("$transitive_dep")
              done

              PROCESSED_LIBS+=("$lib_path")
              COPIED_LIBS_BASENAMES+=("$lib_name")
            done
          
            # 6. Final fixup: Update all copied libraries to link against each other correctly
            for copied_lib in "$DEST_DIR"/lib*.dylib; do
              for original_lib_path in "${PROCESSED_LIBS[@]}"; do
                original_lib_name=$(basename "$original_lib_path")
                if [ -f "$DEST_DIR/$original_lib_name" ]; then
                  install_name_tool -change "$original_lib_path" "@executable_path/$original_lib_name" "$copied_lib"
                fi
              done
            done
          
            # 7. Ad-hoc code sign all bundled libraries and the executable
            echo "Ad-hoc signing bundled libraries and executable..."
            codesign --force --sign - "$DEST_DIR"/lib*.dylib
            codesign --force --deep --sign - "$DEST_DIR/Advancely"
          
            # 8. Force-rename the template directory and key files to lowercase
            TEMPLATE_DIR="$DEST_DIR/resources/templates/1.16.1"
            if [ -d "$TEMPLATE_DIR/All_Advancements" ]; then
              echo "Correcting folder capitalization for macOS..."
              mv "$TEMPLATE_DIR/All_Advancements" "$TEMPLATE_DIR/all_advancements"
            fi
            if [ -f "$TEMPLATE_DIR/all_advancements/1_16_1_All_Advancements.json" ]; then
              mv "$TEMPLATE_DIR/all_advancements/1_16_1_All_Advancements.json" "$TEMPLATE_DIR/all_advancements/1_16_1_all_advancements.json"
            fi
            if [ -f "$TEMPLATE_DIR/all_advancements/1_16_1_All_Advancements_lang.json" ]; then
              mv "$TEMPLATE_DIR/all_advancements/1_16_1_All_Advancements_lang.json" "$TEMPLATE_DIR/all_advancements/1_16_1_all_advancements_lang.json"
            fi
          
          elif [ "$RUNNER_OS" == "Linux" ]; then # Linux
            # For Linux, create a portable folder with the executable, resources, and libraries
            cp build/Advancely release/
            cp -r resources release/
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
            
            # Copy the required SDL shared libraries (.so files) into the release folder
            cp /usr/local/lib/libSDL3.so.0 release/
            cp /usr/local/lib/libSDL3_image.so.0 release/
            cp /usr/local/lib/libSDL3_ttf.so.0 release/
            # Force-rename the template directory and key files to lowercase if they got capitalized
            # This runs on the source 'resources' folder before it's copied into the AppImage
            TEMPLATE_DIR="resources/templates/1.16.1"
            if [ -d "$TEMPLATE_DIR/All_Advancements" ]; then
              echo "Correcting folder capitalization for Linux..."
              mv "$TEMPLATE_DIR/All_Advancements" "$TEMPLATE_DIR/all_advancements"
            fi
            # Now check for files inside the (now lowercase) directory
            if [ -f "$TEMPLATE_DIR/all_advancements/1_16_1_All_Advancements.json" ]; then
              mv "$TEMPLATE_DIR/all_advancements/1_16_1_All_Advancements.json" "$TEMPLATE_DIR/all_advancements/1_16_1_all_advancements.json"
            fi
            if [ -f "$TEMPLATE_DIR/all_advancements/1_16_1_All_Advancements_lang.json" ]; then
              mv "$TEMPLATE_DIR/all_advancements/1_16_1_All_Advancements_lang.json" "$TEMPLATE_DIR/all_advancements/1_16_1_all_advancements_lang.json"
            fi
          fi

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Advancely-v${{ env.PROJECT_VERSION }}-${{ matrix.os }}
          path: release/