name: Build and Package

# This workflow runs on pushes and pull requests to the main branches.
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-13, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- DEPENDENCY INSTALLATION ---
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git libcurl4-openssl-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libdecor-0-dev libxkbcommon-dev libfreetype6-dev libharfbuzz-dev libasound2-dev
          git clone https://github.com/libsdl-org/SDL.git -b main && cd SDL && cmake -B build && cmake --build build && sudo cmake --install build && cd ..
          git clone https://github.com/libsdl-org/SDL_image.git -b main && cd SDL_image && cmake -B build && cmake --build build && sudo cmake --install build && cd ..
          git clone https://github.com/libsdl-org/SDL_ttf.git -b main && cd SDL_ttf && cmake -B build && cmake --build build && sudo cmake --install build && cd ..

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install sdl3 sdl3_image sdl3_ttf curl jpeg-xl webp

      # --- CMAKE CONFIGURATION (FIXED) ---
      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake (macOS)
        if: runner.os == 'macOS'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(brew --prefix) -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0"

      # --- BUILD STEP ---
      - name: Build Project
        run: cmake --build build --config Release

      # --- PACKAGING STEP (REVISED FOR MACOS) ---
      - name: Package Artifacts
        shell: bash
        run: |
          mkdir release
          # --- OS-Specific File Copying ---
          if [ "$RUNNER_OS" == "macOS" ]; then
            # --- COMPATIBLE RECURSIVE DEPENDENCY BUNDLING SCRIPT ---
            BUNDLE_DEST_PATH="release/Advancely.app"
            EXE_PATH="$BUNDLE_DEST_PATH/Contents/MacOS/Advancely"
            LIBS_DEST_DIR="$BUNDLE_DEST_PATH/Contents/MacOS"
            BREW_PREFIX=$(brew --prefix)
          
            echo "Copying app bundle and resources..."
            cp -R "build/Advancely.app" "release/"
            cp -r resources "release/"
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md "release/"

            # Step 1: Discover all unique dependencies recursively
            ALL_DEPENDENCIES=()
            COPIED_LIBS_BASENAMES=() # Use a simple array to track filenames
            FILES_TO_INSPECT=("$EXE_PATH")
          
            idx=0
            while [ $idx -lt ${#FILES_TO_INSPECT[@]} ]; do
              file_to_inspect="${FILES_TO_INSPECT[$idx]}"
              idx=$((idx + 1))

              DEPS=$(otool -L "$file_to_inspect" | grep "$BREW_PREFIX" | awk '{print $1}')
          
              for dep_path in $DEPS; do
                dep_name=$(basename "$dep_path")
                # Check if a library with this filename has already been queued for copy
                if [[ ! " ${COPIED_LIBS_BASENAMES[*]} " =~ " ${dep_name} " ]]; then
                  echo "Discovered dependency: $dep_path"
                  ALL_DEPENDENCIES+=("$dep_path")
                  COPIED_LIBS_BASENAMES+=("$dep_name")
                  FILES_TO_INSPECT+=("$dep_path")
                fi
              done
            done

            # Step 2: Copy all unique libraries to the bundle
            for lib_path in "${ALL_DEPENDENCIES[@]}"; do
              echo "Copying $lib_path"
              cp "$lib_path" "$LIBS_DEST_DIR/"
            done
          
            # Step 3: Update all references
            ALL_BINARIES=("$EXE_PATH")
            for lib_path in "${ALL_DEPENDENCIES[@]}"; do
              lib_name=$(basename "$lib_path")
              ALL_BINARIES+=("$LIBS_DEST_DIR/$lib_name")
            done

            for binary in "${ALL_BINARIES[@]}"; do
              for lib_path in "${ALL_DEPENDENCIES[@]}"; do
                lib_name=$(basename "$lib_path")
                install_name_tool -change "$lib_path" "@executable_path/$lib_name" "$binary"
              done
            done
          
            # Step 4: Ad-hoc sign everything
            echo "Signing bundled libraries and application..."
            codesign --force --sign - --timestamp=none --all-architectures "$LIBS_DEST_DIR"/lib*.dylib
            codesign --force --deep --sign - --timestamp=none --all-architectures "$BUNDLE_DEST_PATH"
          
          elif [ "$RUNNER_OS" == "Linux" ]; then
            # Linux packaging script
            cp build/Advancely release/
            cp -r resources release/
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
            cp /usr/local/lib/libSDL3.so.0 release/
            cp /usr/local/lib/libSDL3_image.so.0 release/
            cp /usr/local/lib/libSDL3_ttf.so.0 release/
          fi
          
          # --- Common Post-Packaging Steps for all OS ---
          echo "Correcting template filenames..."
          TEMPLATE_DIR="release/resources/templates/1.16.1"
          if [ -d "$TEMPLATE_DIR/All_Advancements" ]; then
            mv "$TEMPLATE_DIR/All_Advancements" "$TEMPLATE_DIR/all_advancements"
          fi
          
          LOWERCASE_DIR="$TEMPLATE_DIR/all_advancements"
          if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements.json" ]; then
            mv "$LOWERCASE_DIR/1_16_1_All_Advancements.json" "$LOWERCASE_DIR/1_16_1_all_advancements.json"
          fi
          if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" ]; then
            mv "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" "$LOWERCASE_DIR/1_16_1_all_advancements_lang.json"
          fi

      # --- ZIPPING AND UPLOADING STEP (FIXED) ---
      - name: Set Final Archive Name
        id: set_filename
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            SUFFIX="${{ matrix.os }}-${{ runner.arch }}" # e.g., macos-13-X64
          elif [ "$RUNNER_OS" == "Linux" ]; then
            SUFFIX="Linux"
          fi
          FILENAME="Advancely-v${{ env.PROJECT_VERSION }}-${SUFFIX}"
          echo "FILENAME=$FILENAME" >> $GITHUB_ENV

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: release/