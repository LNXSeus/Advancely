name: Build and Package

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Job 1: Build the Linux version
  build_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git libcurl4-openssl-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libdecor-0-dev libxkbcommon-dev libfreetype6-dev libharfbuzz-dev libasound2-dev
          git clone https://github.com/libsdl-org/SDL.git -b main && cd SDL && cmake -B build && cmake --build build && sudo cmake --install build && cd ..
          git clone https://github.com/libsdl-org/SDL_image.git -b main && cd SDL_image && cmake -B build && cmake --build build && sudo cmake --install build && cd ..
          git clone https://github.com/libsdl-org/SDL_ttf.git -b main && cd SDL_ttf && cmake -B build && cmake --build build && sudo cmake --install build && cd ..
      - name: Configure CMake (Linux)
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release
      - name: Build Project
        run: cmake --build build --config Release
      # --- ADDED TEST STEPS FOR LINUX ---
      - name: Run Executable Test (Linux)
        run: |
          echo "Running executable for 5 seconds..."
          timeout 5s ./build/Advancely --test-mode > output.txt 2>&1 || true
          echo "Executable run finished. Contents of output.txt:"
          cat output.txt
      - name: Upload Test Output (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: test-output-v${{ env.PROJECT_VERSION }}-Linux
          path: output.txt
      - name: Package Linux Artifact
        shell: bash
        run: |
          mkdir release
          cp build/Advancely release/
          cp -r resources release/
          cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
          cp /usr/local/lib/libSDL3.so.0 release/
          cp /usr/local/lib/libSDL3_image.so.0 release/
          cp /usr/local/lib/libSDL3_ttf.so.0 release/
          
          TEMPLATE_DIR="release/resources/templates/1.16.1"
          if [ -d "$TEMPLATE_DIR/All_Advancements" ]; then
            mv "$TEMPLATE_DIR/All_Advancements" "$TEMPLATE_DIR/all_advancements"
          fi
          LOWERCASE_DIR="$TEMPLATE_DIR/all_advancements"
          if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements.json" ]; then
            mv "$LOWERCASE_DIR/1_16_1_All_Advancements.json" "$LOWERCASE_DIR/1_16_1_all_advancements.json"
          fi
          if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" ]; then
            mv "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" "$LOWERCASE_DIR/1_16_1_all_advancements_lang.json"
          fi
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Advancely-v${{ env.PROJECT_VERSION }}-Linux
          path: release/

  # Job 2: Build the macOS Intel (X64) version
  build_macos_intel:
    runs-on: macos-13
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install dependencies (macOS)
        run: brew install sdl3 sdl3_image sdl3_ttf curl jpeg-xl webp
      - name: Configure CMake (macOS)
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(brew --prefix) -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0"
      - name: Build Project
        run: cmake --build build --config Release

      # --- ADDED TEST STEPS FOR MACOS INTEL ---
      - name: Install gtimeout (GNU Coreutils)
        run: brew install coreutils
      - name: Run Executable Test (macOS Intel)
        run: |
          echo "Running executable for 5 seconds..."
          gtimeout 5s ./build/Advancely.app/Contents/MacOS/Advancely --test-mode > output.txt 2>&1 || true
          echo "Executable run finished. Contents of output.txt:"
          cat output.txt
      - name: Upload Test Output (macOS Intel)
        uses: actions/upload-artifact@v4
        with:
          name: test-output-v${{ env.PROJECT_VERSION }}-macOS-X64
          path: output.txt

      - name: Upload Intel App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: Advancely-macOS-X64-app
          path: build/Advancely.app

  # Job 3: Build the macOS Apple Silicon (ARM64) version
  build_macos_arm:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install dependencies (macOS)
        run: brew install sdl3 sdl3_image sdl3_ttf curl jpeg-xl webp
      - name: Configure CMake (macOS)
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(brew --prefix) -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0"
      - name: Build Project
        run: cmake --build build --config Release

      # --- ADDED TEST STEPS FOR MACOS ARM ---
      - name: Install gtimeout (GNU Coreutils)
        run: brew install coreutils
      - name: Run Executable Test (macOS ARM)
        run: |
          echo "Running executable for 5 seconds..."
          gtimeout 5s ./build/Advancely.app/Contents/MacOS/Advancely --test-mode > output.txt 2>&1 || true
          echo "Executable run finished. Contents of output.txt:"
          cat output.txt
      - name: Upload Test Output (macOS ARM)
        uses: actions/upload-artifact@v4
        with:
          name: test-output-v${{ env.PROJECT_VERSION }}-macOS-ARM64
          path: output.txt

      - name: Upload ARM App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: Advancely-macOS-ARM64-app
          path: build/Advancely.app

  # Job 4: Combine macOS builds into a universal package
  package_universal_macos:
    runs-on: macos-latest
    needs: [build_macos_intel, build_macos_arm]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Intel build
        uses: actions/download-artifact@v4
        with:
          name: Advancely-macOS-X64-app
          path: build-x64/Advancely.app
      - name: Download ARM build
        uses: actions/download-artifact@v4
        with:
          name: Advancely-macOS-ARM64-app
          path: build-arm64/Advancely.app
      - name: Create Universal App and Bundle Dependencies
        shell: bash
        run: |
          INTEL_APP_PATH="build-x64/Advancely.app"
          ARM_APP_PATH="build-arm64/Advancely.app"
          UNIVERSAL_APP_PATH="release/Advancely.app"
          
          echo "Setting up universal app structure..."
          mkdir -p release/
          cp -R "$ARM_APP_PATH" "$UNIVERSAL_APP_PATH"
          
          echo "Creating universal executable..."
          lipo -create -output "$UNIVERSAL_APP_PATH/Contents/MacOS/Advancely" \
            "$INTEL_APP_PATH/Contents/MacOS/Advancely" \
            "$ARM_APP_PATH/Contents/MacOS/Advancely"

          echo "Finding all unique dependencies from both architectures..."
          BREW_PREFIX_INTEL="/usr/local"
          BREW_PREFIX_ARM="/opt/homebrew"
          
          # Gather dependencies from both builds
          INTEL_DEPS=$(otool -L "$INTEL_APP_PATH/Contents/MacOS/Advancely" | grep "$BREW_PREFIX_INTEL" | awk '{gsub(/:$/, ""); print $1}')
          ARM_DEPS=$(otool -L "$ARM_APP_PATH/Contents/MacOS/Advancely" | grep "$BREW_PREFIX_ARM" | awk '{gsub(/:$/, ""); print $1}')
          
          # Combine and find unique basenames
          ALL_DEPS_BASENAMES=$( (echo "$INTEL_DEPS"; echo "$ARM_DEPS") | xargs -n1 basename | sort -u)
          
          echo "Creating universal libraries..."
          for lib_name in $ALL_DEPS_BASENAMES; do
            echo "Processing $lib_name..."
            lipo -create -output "$UNIVERSAL_APP_PATH/Contents/MacOS/$lib_name" \
              "$BREW_PREFIX_INTEL/lib/$lib_name" \
              "$BREW_PREFIX_ARM/lib/$lib_name"
          done
          
          echo "Fixing library paths..."
          ALL_DEPS_PATHS=$( (echo "$INTEL_DEPS"; echo "$ARM_DEPS") | sort -u)
          ALL_ITEMS_IN_BUNDLE=$(find "$UNIVERSAL_APP_PATH/Contents/MacOS" -type f \( -name "*.dylib" -o -name "Advancely" \))

          for original_path in $ALL_DEPS_PATHS; do
            lib_name=$(basename "$original_path")
            for item in $ALL_ITEMS_IN_BUNDLE; do
              install_name_tool -change "$original_path" "@executable_path/$lib_name" "$item"
            done
          done
          
          for dylib in $(find "$UNIVERSAL_APP_PATH/Contents/MacOS" -name "*.dylib"); do
            lib_name=$(basename "$dylib")
            install_name_tool -id "@executable_path/$lib_name" "$dylib"
          done
          
          echo "Codesigning final application..."
          codesign --force --sign - "$UNIVERSAL_APP_PATH/Contents/MacOS/"*.dylib
          codesign --force --deep --sign - "$UNIVERSAL_APP_PATH"

      - name: Assemble Final Release Package
        shell: bash
        run: |
          cp -r resources release/
          cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
          
          TEMPLATE_DIR="release/resources/templates/1.16.1"
          if [ -d "$TEMPLATE_DIR/All_Advancements" ]; then
            mv "$TEMPLATE_DIR/All_Advancements" "$TEMPLATE_DIR/all_advancements"
          fi
          LOWERCASE_DIR="$TEMPLATE_DIR/all_advancements"
          if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements.json" ]; then
            mv "$LOWERCASE_DIR/1_16_1_All_Advancements.json" "$LOWERCASE_DIR/1_16_1_all_advancements.json"
          fi
          if [ -f "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" ]; then
            mv "$LOWERCASE_DIR/1_16_1_All_Advancements_lang.json" "$LOWERCASE_DIR/1_16_1_all_advancements_lang.json"
          fi
      - name: Upload Universal macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Advancely-v${{ env.PROJECT_VERSION }}-macOS-Universal
          path: release/
