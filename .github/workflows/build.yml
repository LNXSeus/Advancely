name: Build and Package

# Controls when the workflow will run
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- LINUX STEPS ---
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          # Step 1: Install build tools and SDL's own dependencies
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git libcurl4-openssl-dev \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev \
          libxi-dev libxss-dev libwayland-dev libdecor-0-dev libxkbcommon-dev \
          libfreetype6-dev libharfbuzz-dev libasound2-dev
          
          # Step 2: Build and install SDL3 from source
          echo "Building SDL3 from source..."
          git clone https://github.com/libsdl-org/SDL.git -b main
          cd SDL
          cmake -B build
          cmake --build build
          sudo cmake --install build
          cd ..
          
          # Step 3: Build and install SDL3_image from source
          echo "Building SDL3_image from source..."
          git clone https://github.com/libsdl-org/SDL_image.git -b main
          cd SDL_image
          cmake -B build
          cmake --build build
          sudo cmake --install build
          cd ..
          
          # Step 4: Build and install SDL3_ttf from source
          echo "Building SDL3_ttf from source..."
          git clone https://github.com/libsdl-org/SDL_ttf.git -b main
          cd SDL_ttf
          cmake -B build
          cmake --build build
          sudo cmake --install build
          cd ..

      # --- MACOS STEPS ---
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install sdl3 sdl3_image sdl3_ttf curl

      - name: Configure CMake (Linux/macOS)
        if: runner.os != 'Windows'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      # --- BUILD STEP ---
      - name: Build Project
        run: cmake --build build --config Release

      # --- PACKAGING STEPS ---
      - name: Package Artifacts
        shell: bash
        run: |
          # Create a staging directory for the release artifact
          mkdir release
          
          if [ "$RUNNER_OS" == "Windows" ]; then
            # For Windows, copy the exe, all DLLs from the build output, resources, and text files
            cp build/Release/Advancely.exe release/
            cp build/Release/*.dll release/
            cp -r resources release/
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
          elif [ "$RUNNER_OS" == "macOS" ]; then
          # MACOS
          # 1. Define paths for clarity
          APP_BUNDLE="build/Advancely.app"
          EXE_PATH="$APP_BUNDLE/Contents/MacOS/Advancely"
          FRAMEWORKS_PATH="$APP_BUNDLE/Contents/Frameworks"
          
          # 2. Create the Frameworks directory
          mkdir -p "$FRAMEWORKS_PATH"

          # 3. Create lists for dependency processing
          LIBS_TO_PROCESS=()
          PROCESSED_LIBS=()

          # 4. Find direct dependencies, stripping any colons
          DIRECT_DEPS=$(otool -L "$EXE_PATH" | grep '/opt/homebrew' | awk '{print $1}' | sed 's/://')
          for dep in $DIRECT_DEPS; do
            LIBS_TO_PROCESS+=("$dep")
          done
          
          # 5. Recursively find all transitive dependencies
          while [ ${#LIBS_TO_PROCESS[@]} -gt 0 ]; do
            lib_path=${LIBS_TO_PROCESS[0]}
            LIBS_TO_PROCESS=("${LIBS_TO_PROCESS[@]:1}")

            if [[ " ${PROCESSED_LIBS[*]} " =~ " ${lib_path} " ]]; then
              continue
            fi
          
            echo "Processing dependency: $lib_path"
            lib_name=$(basename "$lib_path")
            cp "$lib_path" "$FRAMEWORKS_PATH/"
            install_name_tool -change "$lib_path" "@rpath/$lib_name" "$EXE_PATH"
          
            # Find dependencies OF THIS LIBRARY, also stripping any colons
            TRANSITIVE_DEPS=$(otool -L "$lib_path" | grep '/opt/homebrew' | awk '{print $1}' | sed 's/://')
            for transitive_dep in $TRANSITIVE_DEPS; do
              LIBS_TO_PROCESS+=("$transitive_dep")
            done

            PROCESSED_LIBS+=("$lib_path")
          done

          # 6. Final fixup of all copied libraries
          for copied_lib in "$FRAMEWORKS_PATH"/*; do
            lib_name=$(basename "$copied_lib")
            install_name_tool -id "@rpath/$lib_name" "$copied_lib"
          
            for original_lib_path in "${PROCESSED_LIBS[@]}"; do
              original_lib_name=$(basename "$original_lib_path")
              if [ -f "$FRAMEWORKS_PATH/$original_lib_name" ]; then
                install_name_tool -change "$original_lib_path" "@rpath/$original_lib_name" "$copied_lib"
              fi
            done
          done

          # 7. Copy final .app bundle and text files to release folder
          cp -r "$APP_BUNDLE" release/
          cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
          
          else # Linux - A more robust AppImage Creation script
            # 1. Download the AppImage tool
            wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
            chmod +x linuxdeploy-x86_64.AppImage
            
            # 2. Create the staging directory with the standard structure
            mkdir -p AppDir/usr/bin
            mkdir -p AppDir/usr/share/advancely
            mkdir -p AppDir/usr/share/applications
            mkdir -p AppDir/usr/share/icons/hicolor/512x512/apps
            
            # 3. Copy ALL necessary files into the AppDir
            cp build/Advancely AppDir/usr/bin/
            cp -r resources AppDir/usr/share/advancely/
            
            # 4. Copy over the desktop integration files
            cp packaging/linux/advancely.desktop AppDir/usr/share/applications/
            cp packaging/linux/advancely.png AppDir/usr/share/icons/hicolor/512x512/apps/
            
            # 5. Run linuxdeploy to bundle library dependencies and create the AppImage
            # It automatically finds the executable and desktop file inside the AppDir
            ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage
            
            # 6. Move the final AppImage and text files to the release folder
            cp Advancely*.AppImage release/
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
            fi

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Advancely-${{ matrix.os }}
          path: release/