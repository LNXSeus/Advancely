name: Build and Package

# Controls when the workflow will run
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- LINUX STEPS ---
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          # Step 1: Install build tools and SDL's own dependencies
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git libcurl4-openssl-dev \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev \
          libxi-dev libxss-dev libwayland-dev libdecor-0-dev libxkbcommon-dev \
          libfreetype6-dev libharfbuzz-dev libasound2-dev
          
          # Step 2: Build and install SDL3 from source
          echo "Building SDL3 from source..."
          git clone https://github.com/libsdl-org/SDL.git -b main
          cd SDL
          cmake -B build
          cmake --build build
          sudo cmake --install build
          cd ..
          
          # Step 3: Build and install SDL3_image from source
          echo "Building SDL3_image from source..."
          git clone https://github.com/libsdl-org/SDL_image.git -b main
          cd SDL_image
          cmake -B build
          cmake --build build
          sudo cmake --install build
          cd ..
          
          # Step 4: Build and install SDL3_ttf from source
          echo "Building SDL3_ttf from source..."
          git clone https://github.com/libsdl-org/SDL_ttf.git -b main
          cd SDL_ttf
          cmake -B build
          cmake --build build
          sudo cmake --install build
          cd ..

      # --- MACOS STEPS ---
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install sdl3 sdl3_image sdl3_ttf curl

      - name: Configure CMake (Linux/macOS)
        if: runner.os != 'Windows'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      # --- BUILD STEP ---
      - name: Build Project
        run: cmake --build build --config Release

      # --- PACKAGING STEPS ---
      - name: Package Artifacts
        shell: bash
        run: |
          # Create a staging directory for the release artifact
          mkdir release
          
          if [ "$RUNNER_OS" == "Windows" ]; then
            # For Windows, copy the exe, all DLLs from the build output, resources, and text files
            cp build/Release/Advancely.exe release/
            cp build/Release/*.dll release/
            cp -r resources release/
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
          elif [ "$RUNNER_OS" == "macOS" ]; then
            # For macOS, copy the .app bundle and the text files
            cp -r build/Advancely.app release/
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
          else # Linux - AppImage Creation
            # Download the AppImage creation tool
            wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
            chmod +x linuxdeploy-x86_64.AppImage
          
            # Run linuxdeploy to bundle the app and all dependencies
            ./linuxdeploy-x86_64.AppImage \
              --appdir AppDir \
              --executable build/Advancely \
              --desktop-file packaging/linux/advancely.desktop \
              --icon-file resources/gui/Advancely_Logo_NoText.png \
              --output appimage
          
            # Copy the final AppImage and text files to the release folder
            cp Advancely*.AppImage release/
            cp _PLEASE_READ_ME.txt LICENSES.txt README.md release/
          fi

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Advancely-${{ matrix.os }}
          path: release/